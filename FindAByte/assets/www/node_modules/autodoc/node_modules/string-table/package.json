{
  "name": "string-table",
  "version": "0.1.5",
  "description": "Format an array of data objects as a textual table",
  "main": "stringTable.js",
  "scripts": {
    "test": "jasmine-node --coffee spec/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/dtao/stringTable.js.git"
  },
  "author": {
    "name": "Dan Tao"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/dtao/stringTable.js/issues"
  },
  "dependencies": {
    "colors": ">= 0.6.2"
  },
  "readme": "stringTable.js\n==============\n\n[![Build Status](https://travis-ci.org/dtao/stringTable.js.png)](https://travis-ci.org/dtao/stringTable.js)\n\nA groundbreaking, innovative JavaScript library to do something that's [literally](https://github.com/JanGorman/node-table) [never](https://github.com/eldargab/easy-table) [been](https://github.com/substack/text-table) [attempted](https://github.com/sorensen/ascii-table) before: formatting an array of data objects as a textual table.\n\nInstallation\n------------\n\n    npm install string-table\n\nExample\n-------\n\n```javascript\nvar users = [\n  { name: 'Dan', gender: 'M', age: 29 },\n  { name: 'Adam', gender: 'M', age: 31 },\n  { name: 'Lauren', gender: 'F', age: 33 }\n];\n\nstringTable.create(users);\n\n/*\n * Result:\n *\n * | name   | gender | age |\n * -------------------------\n * | Dan    | M      |  29 |\n * | Adam   | M      |  31 |\n * | Lauren | F      |  33 |\n */\n```\n\nIt works with multi-line strings, too!\n\n```coffeescript\n# This example is in CoffeeScript for readability.\n\nbooks = [\n  {\n    title: 'The Cat in the Hat',\n    opening:\n      \"\"\"\n      The sun did not shine.\n      It was too wet to play.\n      So we sat in the house\n      All that cold, cold, wet day.\n      \"\"\"\n  },\n  {\n    title: 'Green Eggs and Ham',\n    opening:\n      \"\"\"\n      I am Sam.\n      Sam I am.\n      Do you like green eggs and ham?\n      \"\"\"\n  }\n]\n\nstringTable.create(books)\n\n#\n# Result:\n#\n# | title              | opening                         |\n# --------------------------------------------------------\n# | The Cat in the Hat | The sun did not shine.          |\n# |                    | It was too wet to play.         |\n# |                    | So we sat in the house          |\n# |                    | All that cold, cold, wet day.   |\n# | Green Eggs and Ham | I am Sam.                       |\n# |                    | Sam I am.                       |\n# |                    | Do you like green eggs and ham? |\n#\n```\n\nYou can also specify options to customize how the table is formatted:\n\n```javascript\nvar table = stringTable.create(users, options);\n```\n\nThe available options are summarized below.\n\nOptions\n-------\n\n### `headers`\n\nAn array of strings indicating which column headers to include (and in what order)\n\n*Default: every property from the first object in the list*\n\n#### Example\n\n```javascript\nstringTable.create(users, { headers: ['age', 'name'] });\n\n/*\n * Result:\n *\n * | age | name   |\n * ----------------\n * |  29 | Dan    |\n * |  31 | Adam   |\n * |  33 | Lauren |\n */\n```\n\n### `capitalizeHeaders`\n\nWhether or not to capitalize the table's column headers\n\n*Default: `false`*\n\n#### Example\n\n```javascript\nstringTable.create(users, { capitalizeHeaders: true });\n\n/*\n * Result:\n *\n * | Name   | Gender | Age |\n * -------------------------\n * | Dan    | M      |  29 |\n * | Adam   | M      |  31 |\n * | Lauren | F      |  33 |\n */\n```\n\n### `formatters`\n\nAn object mapping column names to formatter functions, which will accept `(value, header)` arguments\n\n*Default: none*\n\n#### Example\n\n```javascript\nstringTable.create(users, {\n  formatters: {\n    name: function(value, header) { return value.toUpperCase(); }\n  }\n});\n\n/*\n * Result:\n *\n * | name   | gender | age |\n * -------------------------\n * | DAN    | M      |  29 |\n * | ADAM   | M      |  31 |\n * | LAUREN | F      |  33 |\n */\n```\n\nA formatter may also return an object with the properties `{ value, format }`, where `format` in turn can have the properties `{ color, alignment }`.\n\n```javascript\nstringTable.create(users, {\n  formatters: {\n    gender: function(value, header) {\n      return {\n        value: value,\n        format: {\n          color: value === 'M' ? 'cyan' : 'magenta',\n          alignment: 'right'\n        }\n      };\n    }\n  }\n});\n\n/*\n * Result:\n *\n * | name   | gender |    age |\n * ----------------------------\n * | Dan    |      M |  29.00 |\n * | Adam   |      M |  31.00 |\n * | Lauren |      F |  33.00 |\n *\n * (Imagine the Ms are cyan and the F is magenta above.)\n */\n```\n\n### `typeFormatters`\n\nAn object mapping data *types* (`'string'`, `'number'`, `'boolean'`, etc.) to formatter functions (has lower precedence than `formatters` option)\n\n*Default: none*\n\n#### Example\n\n```javascript\nstringTable.create(users, {\n  typeFormatters: {\n    number: function(value, header) { return value.toFixed(2); }\n  }\n});\n\n/*\n * Result:\n *\n * | name   | gender |    age |\n * ----------------------------\n * | Dan    | M      |  29.00 |\n * | Adam   | M      |  31.00 |\n * | Lauren | F      |  33.00 |\n */\n```\n\n### `outerBorder` and `innerBorder`\n\nThe character(s) used to enclose the table and to delimit cells within the table, respectively\n\n*Defaults: `'|'` for both*\n\n#### Example\n\n```javascript\nstringTable.create(users, {\n  outerBorder: '%',\n  innerBorder: '$'\n});\n\n/*\n * Result:\n *\n * % name   $ gender $ age %\n * -------------------------\n * % Dan    $ M      $  29 %\n * % Adam   $ M      $  31 %\n * % Lauren $ F      $  33 %\n */\n```\n\n### `rowSeparator`\n\nThe character used to separate rows in the table\n\n*Default: none*\n\n#### Example\n\n```javascript\nstringTable.create(users, { rowSeparator: '~' });\n\n/*\n * Result:\n *\n * | name   | gender | age |\n * -------------------------\n * | Dan    | M      |  29 |\n * ~~~~~~~~~~~~~~~~~~~~~~~~~\n * | Adam   | M      |  31 |\n * ~~~~~~~~~~~~~~~~~~~~~~~~~\n * | Lauren | F      |  33 |\n */\n```\n\n### `headerSeparator`\n\nThe character used to separate the header row from the table body\n\n*Default: `'-'`*\n\n#### Example\n\n```javascript\nstringTable.create(users, { headerSeparator: '*' });\n\n/*\n * Result:\n *\n * | name   | gender | age |\n * *************************\n * | Dan    | M      |  29 |\n * | Adam   | M      |  31 |\n * | Lauren | F      |  33 |\n */\n```\n",
  "_id": "string-table@0.1.5",
  "dist": {
    "shasum": "87dad749fb054ef501637bba39a168f1585e4e68",
    "tarball": "http://registry.npmjs.org/string-table/-/string-table-0.1.5.tgz"
  },
  "_from": "string-table@0.1.5",
  "_npmVersion": "1.3.2",
  "_npmUser": {
    "name": "dtao",
    "email": "daniel.tao@gmail.com"
  },
  "maintainers": [
    {
      "name": "dtao",
      "email": "daniel.tao@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "87dad749fb054ef501637bba39a168f1585e4e68",
  "_resolved": "https://registry.npmjs.org/string-table/-/string-table-0.1.5.tgz",
  "homepage": "https://github.com/dtao/stringTable.js"
}
